import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
import os
from langchain_google_genai import GoogleGenerativeAIEmbeddings
import google.generativeai as genai
from langchain_community.vectorstores import FAISS
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate
from dotenv import load_dotenv

load_dotenv()


GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
if not GOOGLE_API_KEY:
    raise ValueError("API key not found in environment variables. Please check 'key.env'.")

genai.configure(api_key=GOOGLE_API_KEY)

def get_pdf_text(pdf_docs):
    text = ""
    for pdf in pdf_docs:
        pdf_reader = PdfReader(pdf)
        for page in pdf_reader.pages:
            text += page.extract_text()
    return text

def get_text_chunks(text):
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=10000, chunk_overlap=1000)
    chunks = text_splitter.split_text(text)
    return chunks

def get_vector_store(text_chunks):
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001", google_api_key=GOOGLE_API_KEY)
    vector_store = FAISS.from_texts(text_chunks, embedding=embeddings)
    vector_store.save_local("faiss_index")

def get_conversational_chain():
    prompt_template = """
    ржирж┐рж░рзНржжрзЗрж╢рж╛ржмрж▓рзА:
    ржЖржкржирж┐ ржПржХржЯрж┐ AI рж╕рж┐рж╕рзНржЯрзЗржо ржпрж╛ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЕржирзБржнрзВрждрж┐ ржмрзБржЭрждрзЗ ржПржмржВ ржкржмрж┐рждрзНрж░ ржХрзБрж░ржЖржи ржерзЗржХрзЗ ржЙржжрзНржзрзГрждрж┐ ржкрзНрж░ржжрж╛ржи ржХрж░рждрзЗ ржбрж┐ржЬрж╛ржЗржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА рждрж╛ржжрзЗрж░ ржЕржирзБржнрзВрждрж┐ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЗржиржкрзБржЯ ржХрж░ржмрзЗ, ржпрзЗржоржи ржмрж┐рж╖ржгрзНржгрждрж╛ ржмрж╛ ржЙржжрзНржмрзЗржЧред ржЖржкржирж╛рж░ ржХрж╛ржЬ рж╣рж▓ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржорж╛ржирж╕рж┐ржХ ржЕржмрж╕рзНржерж╛ ржмрзЛржЭрж╛ ржПржмржВ рждрж╛ржжрзЗрж░ ржЕржирзБржкрзНрж░рж╛ржгрж┐ржд ржУ рж╕рж╛ржирзНрждрзНржмржирж╛ ржжрзЗржУржпрж╝рж╛рж░ ржЬржирзНржп ржкржмрж┐рждрзНрж░ ржХрзБрж░ржЖржирзЗрж░ ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржЖржпрж╝рж╛ржд ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рж╛ред
    ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ:
    - ржмрж╛ржВрж▓рж╛ржпрж╝ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЗржиржкрзБржЯржЯрж┐ ржоржирзЛржпрзЛржЧ рж╕рж╣ржХрж╛рж░рзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзБржиред
    - ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржорж╛ржирж╕рж┐ржХ ржЕржмрж╕рзНржерж╛рж░ рж╕рж╛ржерзЗ рж╕рж░рж╛рж╕рж░рж┐ рж╕ржорзНржкрж░рзНржХрж┐ржд ржкржмрж┐рждрзНрж░ ржХрзБрж░ржЖржирзЗрж░ ржЙржжрзНржзрзГрждрж┐ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред
    - ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ ржЖржкржирж╛рж░ ржХрзБрж░ржЖржирзЗрж░ ржЙржжрзНржзрзГрждрж┐ржЧрзБрж▓рж┐ рж╕ржарж┐ржХ ржПржмржВ ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХред
    - ржпржжрж┐ рждржерзНржп ржЕржирзБржкрж╕рзНржерж┐ржд ржмрж╛ ржЕрж╕рзНржкрж╖рзНржЯ рж╣ржпрж╝, рждржмрзЗ ржкрзНрж░рж╕ржЩрзНржЧрзЗрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржпрзМржХрзНрждрж┐ржХ ржЕржирзБржорж╛ржи ржХрж░рзБржи ржпрж╛рждрзЗ рж╕рж░рзНржмрзЛрждрзНрждржо ржЕржирзБржкрзНрж░рзЗрж░ржгрж╛ ржкрзНрж░ржжрж╛ржи ржХрж░рж╛ ржпрж╛ржпрж╝ред
    - рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржХрж┐ржирзНрждрзБ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рж╣ржи, ржкрзНрж░ржпрж╝рзЛржЬржи рж╣рж▓рзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ рж╕рж╛ржирзНрждрзНржмржирж╛ ржжрзЗржУржпрж╝рж╛рж░ ржЬржирзНржп ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржкржжржХрзНрж╖рзЗржк ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред
    ржкрзНрж░рж╕ржЩрзНржЧ:\n{context}\n
    ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЕржирзБржнрзВрждрж┐: \n{question}\n
    ржЕржирзБржкрзНрж░рзЗрж░ржгрж╛ржорзВрж▓ржХ ржЙржжрзНржзрзГрждрж┐:
    """

    model = ChatGoogleGenerativeAI(model="gemini-1.5-pro", temperature=0.3)
    prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
    chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)

    return chain

def user_input(user_question):
    with st.spinner('ржкрзНрж░рж╕рзЗрж╕рж┐ржВ...'):
        embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001", google_api_key=GOOGLE_API_KEY)
        
        new_db = FAISS.load_local("faiss_index", embeddings, allow_dangerous_deserialization=True)
        docs = new_db.similarity_search(user_question)

        chain = get_conversational_chain()

        response = chain({"input_documents": docs, "question": user_question}, return_only_outputs=True)

        st.write("Reply: ", response["output_text"])

def main():
    st.set_page_config("Get Motivation From the Holy AL-QURAN", page_icon="ЁЯУЪ", layout="wide")
    st.header("ЁЯУЦ Get Motivation From the Holy AL-QURAN")


    Law = st.text_input("What Happened?")

    if Law:
        user_question = f"{Law}. And Please give me guideline, Motivation and instructions what will be best in this context from the Holy Quran, Give Precise instruction"
        user_input(user_question)

    with st.sidebar:
        st.title("Documents:")

        # Process the provided PDFs
        pdf_files = ["fab.pdf"]
        raw_text = get_pdf_text([open(pdf, "rb") for pdf in pdf_files])
        text_chunks = get_text_chunks(raw_text)
        get_vector_store(text_chunks)

if __name__ == "__main__":
    main()
